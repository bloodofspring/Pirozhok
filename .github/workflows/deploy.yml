name: Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # - name: Send Telegram notification (start)
      #   run: |
      #     curl -s -X POST "https://api.telegram.org/bot${{ secrets.NOTIFICATION_BOT_TOKEN }}/sendMessage" \
      #         -H "Content-Type: application/json" \
      #         -d '{
      #           "chat_id": "${{ vars.TELEGRAM_CHAT_ID }}",
      #           "text": "üöÄ –ù–∞—á–∏–Ω–∞—é –¥–µ–ø–ª–æ–π...\n–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${{ github.repository }}\n–í–µ—Ç–∫–∞: ${{ github.ref_name }}\n–ö–æ–º–º–∏—Ç: ${{ github.sha }}\n–ê–≤—Ç–æ—Ä: ${{ github.actor }}"
      #         }'

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./app
          file: .docker/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/timtimbot:latest

      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /var/www/Pirozhok
            git pull
            cd /var/www/Pirozhok/.docker
            
            export API_KEY=${{ secrets.API_KEY }}
            export DB_HOST=${{ vars.DB_HOST }}
            export DB_PORT=${{ vars.DB_PORT }}
            export POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            export POSTGRES_DB=${{ vars.POSTGRES_DB }}
            export DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}

            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml down
            docker compose -f docker-compose.prod.yml up -d bot
            docker system prune -f
      
      # - name: Ping Bot
      #   id: pingbot
      #   uses: appleboy/ssh-action@v1.0.3
      #   with:
      #     host: ${{ secrets.VPS_HOST }}
      #     username: ${{ secrets.VPS_USER }}
      #     key: ${{ secrets.VPS_SSH_KEY }}
      #     script: |
      #       for i in {1..20}; do
      #         response=$(curl -s -w "%{http_code}" "http://localhost:${{ vars.HEALTHCHECK_PORT }}/ping?token=${{ secrets.API_KEY }}" -o /dev/null)
      #         if [ "$response" != "200" ]; then
      #           echo "Attempt $i: Bot is not responding (HTTP code: $response)"
      #         else
      #           echo "Attempt $i: Bot is responding OK"
      #           exit 0
      #         fi
      #         sleep 3
      #       done

      #       exit 1

      # - name: Send Telegram notification (success)
      #   if: success()
      #   run: |
      #     curl -s -X POST "https://api.telegram.org/bot${{ secrets.NOTIFICATION_BOT_TOKEN }}/sendMessage" \
      #         -H "Content-Type: application/json" \
      #         -d '{
      #           "chat_id": "${{ vars.TELEGRAM_CHAT_ID }}",
      #           "text": "‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!\n–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${{ github.repository }}\n–í–µ—Ç–∫–∞: ${{ github.ref_name }}\n–ö–æ–º–º–∏—Ç: ${{ github.sha }}\n–ê–≤—Ç–æ—Ä: ${{ github.actor }}"
      #         }'

      # - name: Send Telegram notification (failure)
      #   if: failure()
      #   run: |
      #     curl -s -X POST "https://api.telegram.org/bot${{ secrets.NOTIFICATION_BOT_TOKEN }}/sendMessage" \
      #         -H "Content-Type: application/json" \
      #         -d '{
      #           "chat_id": "${{ vars.TELEGRAM_CHAT_ID }}",
      #           "text": "‚ùå –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π!\n–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${{ github.repository }}\n–í–µ—Ç–∫–∞: ${{ github.ref_name }}\n–ö–æ–º–º–∏—Ç: ${{ github.sha }}\n–ê–≤—Ç–æ—Ä: ${{ github.actor }}"
      #         }'
